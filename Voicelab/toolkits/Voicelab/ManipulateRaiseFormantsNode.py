from Voicelab.pipeline.Node import Node
from parselmouth.praat import call
from Voicelab.toolkits.Voicelab.VoicelabNode import VoicelabNode


###################################################################################################
# MANIPULATE FORMANTS NODE
# WARIO pipeline node for manipulating voice formants.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
# 'unit'    :
# 'factor'  :
###################################################################################################
# RETURNS
# 'manipulated_voice'   : sound file of the original voice with modifications
###################################################################################################


class ManipulateRaiseFormantsNode(VoicelabNode):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        # initialize with default arguments
        self.args = {
            "unit": ("percent", []),
            "formant_shift_ratio": 1.15,
            "new_pitch_median": 0,
            "pitch_range_factor": 1,
            "duration_factor": 1,
            "normalize amplitude": True,
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################
    def process(self):
        sound = self.args["voice"]
        file_path = self.args["file_path"]
        formant_shift_ratio = self.args["formant_shift_ratio"]
        pitch_range_factor = self.args["new_pitch_median"]
        duration_factor = self.args["new_pitch_median"]
        f0min, f0max = self.pitch_bounds(sound)

        output_file_name = file_path.split("/")[-1].split(".wav")[0]
        output_file_name = (
            f"{output_file_name}_manipulate_formants_{formant_shift_ratio}"
        )

        manipulated_sound = call(
            sound,
            "Change gender",
            f0min,
            f0max,
            formant_shift_ratio,
            pitch_range_factor,
            duration_factor,
        )

        if self.args["normalize amplitude"]:
            manipulated_sound.scale_intensity(70)

        manipulated_sound.name = output_file_name

        return {"voice": manipulated_sound}
