from Voicelab.pipeline.Node import Node
from parselmouth.praat import call
from Voicelab.toolkits.Voicelab.VoicelabNode import VoicelabNode

###################################################################################################
# MEASURE PITCH NODE
# WARIO pipeline node for measuring voice pitch.
###################################################################################################
# ARGUMENTS:
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS:
# 'mean_f0' : mean pitch
# 'stdev_f0': standard deviation
# 'min_f0'  : min pitch value
# 'max_f0'  : max pitch value
###################################################################################################


class MeasurePitchNode(VoicelabNode):
    def __init__(self, *args, **kwargs):

        """
        Args:
            *args:
            **kwargs:
        """
        super().__init__(*args, **kwargs)
        # Default settings for measuring pitch.
        self.args = {
            # Simple default values
            "Time Step": 0,  # Positive float or 0
            "Max Number of Candidates": 15,  # Positive integers
            "Silence Threshold": 0.03,  # Positive number
            "Voicing Threshold": 0.45,  # Positive number
            "Octave Cost": 0.01,  # Positive number
            "Octave Jump Cost": 0.35,  # Positive number
            "Voiced Unvoiced Cost": 0.14,  # Positive number
            "Unit": ("Hertz", ["Hertz",
                               "Hertz (Logarithmic)",
                               "mel",
                               "logHertz",
                               "semitones re 1 Hz",
                               "semitones re 100 Hz",
                               "semitones re 200 Hz",
                               "semitones re 440 Hz",
                               "ERB",
                               ]
                     ),
            # Tuple defines a discrete set of options, 0 = selected value, 1 = a list of all options
            "Algorithm": ("To Pitch (ac)", ["To Pitch (ac)", "To Pitch (cc)"]),
            "Very Accurate": ("yes", ["yes", "no"]),
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################

    def process(self):

        voice = self.args["voice"]
        file_duration: float = call(voice, "Get total duration")

        time_step = self.args["Time Step"]
        max_number_of_candidates = self.args["Max Number of Candidates"]
        silence_threshold = self.args["Silence Threshold"]
        voicing_threshold = self.args["Voicing Threshold"]
        octave_cost = self.args["Octave Cost"]
        octave_jump_cost = self.args["Octave Jump Cost"]
        voiced_unvoiced_cost = self.args["Voiced Unvoiced Cost"]
        unit = self.args["Unit"][0]

        method = self.args["Algorithm"][0]
        very_accurate = self.args["Very Accurate"][0]

        try:
            pitch_floor, pitch_ceiling = self.pitch_bounds(voice)
            pitch, mean_f0, stdev_f0, min_f0, max_f0 = measure_pitch(
                voice,
                floor=pitch_floor,
                ceiling=pitch_ceiling,
                method=method,
                time_step=time_step,
                max_number_of_candidates=max_number_of_candidates,
                silence_threshold=silence_threshold,
                voicing_threshold=voicing_threshold,
                octave_cost=octave_cost,
                octave_jump_cost=octave_jump_cost,
                voiced_unvoiced_cost=voiced_unvoiced_cost,
                unit=unit,
                very_accurate=very_accurate,
            )

            return {
                "Mean Pitch (F0)": mean_f0,
                "Standard Deviation Pitch (F0)": stdev_f0,
                "Pitch Min (F0)": min_f0,
                "Pitch Max (F0)": max_f0,
                "Pitch": pitch,
                "Pitch Floor": pitch_floor,
                "Pitch Ceiling": pitch_ceiling,
            }
        except:
            return {
                "Mean Pitch (F0)": "Pitch Measurement Failed",
                "Standard Deviation Pitch (F0)": "Pitch Measurement Failed",
                "Pitch Min (F0)": "Pitch Measurement Failed",
                "Pitch Max (F0)": "Pitch Measurement Failed",
                "Pitch": "Pitch Measurement Failed",
                "Pitch Floor": "Pitch Measurement Failed",
                "Pitch Ceiling": "Pitch Measurement Failed",
            }




## TODO: Testing moving the function out of the node definition, this could be done with all of
##       the other nodes as well to make it easier to read, write, and modify later.
###################################################################################################
# measure_pitch: measure the pitch of a single voice
## ARGUMENTS
# + voice
# + floor=50 : pitch floor
# + ceiling=500 : pitch ceiling
# + method='ac' :
# + time_step=0:
# + max_number_of_candidates=15
# + silence_threshold=0.03:
# + voicing_threshold=0.45:
# + octave_cost=0.01
# + octave_jump_cost=0.35
# + voiced_unvoiced_cost=0.14
# + unit='Hertz'
# + very_accurate='no'
## RETURNS
# + mean_f0 :
# + stdev_f0 :
# + min_f0 :
# + max_f0 :


###################################################################################################
def measure_pitch(
    voice,
    floor=50,
    ceiling=500,
    method="ac",
    time_step=0,
    max_number_of_candidates=15,
    silence_threshold=0.03,
    voicing_threshold=0.45,
    octave_cost=0.01,
    octave_jump_cost=0.35,
    voiced_unvoiced_cost=0.14,
    unit="Hertz",
    very_accurate="no",
):
    #floor, ceiling = pitch_bounds(voice)

    """
    Args:
        voice:
        floor:
        ceiling:
        method:
        time_step:
        max_number_of_candidates:
        silence_threshold:
        voicing_threshold:
        octave_cost:
        octave_jump_cost:
        voiced_unvoiced_cost:
        unit:
        very_accurate:
    """
    pitch: object = call(
        voice,
        method,
        time_step,
        floor,
        max_number_of_candidates,
        very_accurate,
        silence_threshold,
        voicing_threshold,
        octave_cost,
        octave_jump_cost,
        voiced_unvoiced_cost,
        ceiling,
    )
    mean_f0: float = call(pitch, "Get mean", 0, 0, unit)
    stdev_f0: float = call(
        pitch, "Get standard deviation", 0, 0, unit
    )  # get standard deviation
    min_f0: float = call(pitch, "Get minimum", 0, 0, unit, "Parabolic")
    max_f0: float = call(pitch, "Get maximum", 0, 0, unit, "Parabolic")

    return pitch, mean_f0, stdev_f0, min_f0, max_f0
