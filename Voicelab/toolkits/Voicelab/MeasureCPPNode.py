import parselmouth

from Voicelab.pipeline.Node import Node
from parselmouth.praat import call
from Voicelab.toolkits.Voicelab.VoicelabNode import VoicelabNode


###################################################################################################
# MEASURE DURATION NODE
# WARIO pipeline node for measuring the duration of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
# 'cpp'  : Cepstral Peak Prominance
###################################################################################################


class MeasureCPPNode(VoicelabNode):
    def __init__(self, *args, **kwargs):
        """
        Args:
            *args:
            **kwargs:
        """
        super().__init__(*args, **kwargs)

        self.args = {
            "interpolation": "Parabolic",  # todo add user options for 'None', 'Cubic', and 'Sinc70'
            "Tilt line qeufrency lower bound": 0.001,
            "Tilt line qeufrency upper bound": 0,  # 0 = entire range
            "Line type": "Straight",  # todo add user option 'Exponential decay'
            "Fit method": "Robust",  # todo add user option 'Least Squares',
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################

    def process(self):
        """cpp"""
        try:
            voice = self.args["voice"]
            pitch_ceiling = self.args["Pitch Ceiling"]
            pitch_floor = self.args["Pitch Floor"]
            spectrum = voice.to_spectrum()
            cepstrum = call(spectrum, "To PowerCepstrum")

            # Call the provided pitch bounds functions
            pitch_floor = self.args["Pitch Floor"]
            pitch_ceiling = self.args["Pitch Ceiling"]

            interpolation = self.args["interpolation"]
            tilt_line_qeufrency_lower_bound = self.args["Tilt line qeufrency lower bound"]
            tilt_line_qeufrency_upper_bound = self.args["Tilt line qeufrency upper bound"]
            linetype = self.args["Line type"]
            fitmethod = self.args["Fit method"]

            cpp = call(
                cepstrum,
                "Get peak prominence",
                pitch_floor,
                pitch_ceiling,
                interpolation,
                tilt_line_qeufrency_lower_bound,
                tilt_line_qeufrency_upper_bound,
                linetype,
                fitmethod,
            )
            return {"cpp": cpp}
        except:
            return {"cpp": "Measurement failed"}