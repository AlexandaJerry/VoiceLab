from typing import List, Union, Tuple

from Voicelab.pipeline.Node import Node
from parselmouth.praat import call
from Voicelab.toolkits.Voicelab.VoicelabNode import VoicelabNode

###################################################################################################
# MANIPULATE PITCH NODE
# WARIO pipeline node for manipulating the pitch of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################


class ManipulatePitchAndFormantsNode(VoicelabNode):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.args = {
            "unit": ("ERB", ["ERB", "Hertz", "mel", "logHertz", "semitones"]),
            "Pitch Method": ("Shift", ["Shift frequencies", "Multiply frequencies"]),
            "Pitch Amount": 20,
            "Formant scalar (%)": 15,
            "Normalize amplitude": True,
            "Time Step": 0.001,

            "Lower Pitch": True,
            "Raise Pitch": True,
            "Lower Formants": True,
            "Raise Formants": True,
            "Lower Pitch and Formants": True,
            "Raise Pitch and Formants": True,
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################

    def process(self):
        list_of_sounds_to_save = []
        self.initialize_values(self)

        if self.args["Lower Pitch"]:
            lower_pitch_sound = self.manipulate_pitch()
            list_of_sounds_to_save.append()
        if self.args["Raise Pitch"]:
            raise_pitch_sound = self.manipulate_pitch()


    def initialize_values(self):
        if self.args["Lower Pitch"]:
            if self.args["Pitch method"][0] == "Shift frequencies":
                self.args["Pitch Amount"] = -1 * self.args["Pitch Amount"]
            else:
                if self.args["Pitch Amount"] > 1:
                    self.args["Pitch Amount"] = self.args["Pitch Amount"] / 100
                else:
                    self.args["Pitch Amount"] = self.args["Pitch Amount"]
        elif self.args["Raise Pitch"]:
            if self.args["Pitch method"][0] == "Shift frequencies":
                self.args["Pitch Amount"] = self.args["Pitch Amount"]
            else:
                if self.args["Pitch Amount"] > 1:
                    self.args["Pitch Amount"] = self.args["Pitch Amount"] / 100

    def manipulate_pitch(self):
        sound = self.args["voice"]
        file_path = self.args["file_path"]
        time_step = self.args["Time Step"]
        f0min, f0max = self.pitch_bounds(sound)
        #  lower the lower bound to accommodate the manipulation
        f0min = (f0min - self.args["Pitch Amount"]) * 0.9

        # create manipulation object
        manipulation = call(sound, "To Manipulation", time_step, f0min, f0max)
        # extract pitch tier
        pitch_tier = call(manipulation, "Extract pitch tier")
        # modify pitch tier and replace it
        call(
            pitch_tier,
            self.args["Pitch method"][0],
            f0min,
            f0max,
            self.args["Pitch Amount"],
            self.args["unit"],
        )
        call([pitch_tier, manipulation], "Replace pitch tier")
        # resynthesize voices
        manipulated_sound = call(manipulation, "Get resynthesis (overlap-add)")

        output_file_name = file_path.split("/")[-1].split(".wav")[0]
        output_file_name = (
            f"{output_file_name}"
            f"_raise_pitch_"
            f'{self.args["Pitch method"][0]}_'
            f'{self.args["Pitch Amount"]}_'
            f'{self.args["unit"]} '
        )

        manipulated_sound.name = output_file_name

        return manipulated_sound
