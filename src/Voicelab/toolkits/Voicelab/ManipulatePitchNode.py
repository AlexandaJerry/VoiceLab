from Voicelab.pipeline.Node import Node
from parselmouth.praat import call
from Voicelab.toolkits.Voicelab.VoicelabNode import VoicelabNode

###################################################################################################
# MANIPULATE PITCH NODE
# WARIO pipeline node for manipulating the pitch of a voice.
###################################################################################################
# ARGUMENTS
# 'voice'   : sound file generated by parselmouth praat
###################################################################################################
# RETURNS
###################################################################################################


class ManipulatePitchNode(VoicelabNode):
    def __init__(self, *args, **kwargs):
        """
        Args:
            *args:
            **kwargs:
        """
        super().__init__(*args, **kwargs)

        self.args = {
            "Unit": (
                "Hertz",
                [],
            ),  # TODO: Find out what the other options for this can be
            "factor": -0.5,
        }

    ###############################################################################################
    # process: WARIO hook called once for each voice file.
    ###############################################################################################

    def process(self):

        sound = self.args["voice"]
        file_path = self.args["file_path"]
        factor = self.args["factor"]
        unit = self.args["unit"]

        f0min, f0max = self.pitch_bounds(sound)

        manipulation = call(sound, "To Manipulation", 0.001, f0min, f0max)
        pitch_tier = call(manipulation, "Extract pitch tier")
        call(pitch_tier, "Shift frequencies", f0min, f0max, factor, unit)
        call([pitch_tier, manipulation], "Replace pitch tier")
        manipulated_sound = call(manipulation, "Get resynthesis (overlap-add)")
        manipulated_sound.scale_intensity(70)

        output_file_name = file_path.split("/")[-1].split(".wav")[0]
        output_file_name = (
            output_file_name + "_manipulate_pitch_" + str(factor) + "_" + str(unit)
        )

        manipulated_sound.name = output_file_name

        return {"voice": manipulated_sound}
